{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {},		
	"variables": {
		"_artifactsLocation": "https://raw.githubusercontent.com/JesseHoch/okdazure/master",
		"masterVmSize": "Standard_B1ms",
		"infraVmSize": "Standard_B1ms",
		"nodeVmSize": "Standard_B1ms",
		"storageKind": "managed",
		"openshiftClusterPrefix": "okdcluster",
		"masterInstanceCount": 1,
		"infraInstanceCount": 1,
		"nodeInstanceCount": 1,
		"dataDiskSize": 128,
		"adminUsername": "azureuser",
		"openshiftPassword": "ChangeMe123!",
		"enableMetrics": "true",
		"enableLogging": "true",
		"sshPublicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHT83TtJytY5tznaF8AsQAwFzN5nY5HVGxtlmBR083FEf+1g3rVENCvsV0i+3dVHExw+IbaMExCbqCSjcnM3PfCG23id5HRw7L2kROXXbEjcZe8LzEj7DPZ4ZWnQ1iVHenlO0YqBtPEb5BNhhmFHyylGewKt2Q7wkUZWTZfiCYT+a2Is5z4KjA2xxXs/A4pox8yrjmJb787T5RrLz422RsdUqVXHPhvwo8DrlC0mBEPax0Z1Ou8yKR/upW1uq1yJwadEox0aNtOm1zOyrhNaA1QzAMXeFrq2x91yJOFfD6LoKS7/oHEc9uslVBpTgNbN9J/PvQXhCIRntOsLngsPnF",
		"sshKeyPath": "[concat('/home/', variables('adminUsername'),'/.ssh/authorized_keys')]",
		"enableAzure": "true",
		"defaultSubDomainType": "nip.io",
		"location": "[resourceGroup().location]",
		"resourceGroupName": "[resourceGroup().id]",
		"apiVersionCompute": "2017-03-30",
		"apiVersionNetwork": "2017-09-01",
		"apiVersionStorage": "2017-06-01",
		"apiVersionLinkTemplate": "2015-01-01",
		"namingInfix": "[toLower(variables('openshiftClusterPrefix'))]",
		"openshiftMasterHostname": "[concat(variables('namingInfix'), '-master')]",
		"openshiftNodeHostname": "[concat(variables('namingInfix'), '-node')]",
		"openshiftInfraHostname": "[concat(variables('namingInfix'), '-infra')]",
		"newStorageAccountMaster": "[concat('master', uniqueString(concat(resourceGroup().id, 'msa')))]",
		"newStorageAccountInfra": "[concat('infra', uniqueString(concat(resourceGroup().id, 'infra')))]",
		"newStorageAccountNodeOs": "[concat('nodeos', uniqueString(concat(resourceGroup().id, 'nodeossa')))]",
		"newStorageAccountNodeData": "[concat('nodedata', uniqueString(concat(resourceGroup().id, 'nodedatasa')))]",
		"newStorageAccountRegistry": "[concat('registry', uniqueString(concat(resourceGroup().id, 'registry')))]",
		"newStorageAccountPersistentVolume1": "[concat('pv1sa', uniqueString(concat(resourceGroup().id, 'persistentvolume1')))]",
		"newStorageAccountArray": [
			{ "name": "[variables('newStorageAccountRegistry')]", "tagName": "RegistryStorageAccount", "skuName": "[variables('storageSkuObject').registry.skuName]", "skuTier": "[variables('storageSkuObject').registry.skuTier]" },
			{ "name": "[variables('newStorageAccountMaster')]", "tagName": "MasterStorageAccount", "skuName": "[variables('storageSkuObject').master.skuName]", "skuTier": "[variables('storageSkuObject').master.skuTier]" },
			{ "name": "[variables('newStorageAccountInfra')]", "tagName": "InfraStorageAccount", "skuName": "[variables('storageSkuObject').infra.skuName]", "skuTier": "[variables('storageSkuObject').infra.skuTier]" },
			{ "name": "[variables('newStorageAccountNodeOs')]", "tagName": "NodeStorageAccount", "skuName": "[variables('storageSkuObject').node.skuName]", "skuTier": "[variables('storageSkuObject').node.skuTier]" },
			{ "name": "[variables('newStorageAccountNodeData')]", "tagName": "NodeStorageAccount", "skuName": "[variables('storageSkuObject').node.skuName]", "skuTier": "[variables('storageSkuObject').node.skuTier]" },
			{ "name": "[variables('newStorageAccountPersistentVolume1')]", "tagName": "PersistentVolume1StorageAccount", "skuName": "[variables('storageSkuObject').persistent.skuName]", "skuTier": "[variables('storageSkuObject').persistent.skuTier]" }
		],
		"storageSkuObject": {
			"master": {
				"skuName": "[variables('vmSizesMap')[variables('masterVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[variables('masterVmSize')].storageAccountTier]"
			},
			"infra": {
				"skuName": "[variables('vmSizesMap')[variables('infraVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[variables('infraVmSize')].storageAccountTier]"
			},
			"node": {
				"skuName": "[variables('vmSizesMap')[variables('nodeVmSize')].storageAccountType]",
				"skuTier": "[variables('vmSizesMap')[variables('nodeVmSize')].storageAccountTier]"
			},
			"registry": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			},
			"persistent": {
				"skuName": "Standard_LRS",
				"skuTier": "Standard"
			}
		},
		"managedStorageCount": 3,
		"storageLoopCount": "[concat(variables('storageKind'), 'StorageCount')]",
		"masterUri": "[concat(variables('storageKind'), 'MasterUri')]",
		"infraUri": "[concat(variables('storageKind'), 'InfraUri')]",
		"nodeOsUri": "[concat(variables('storageKind'), 'NodeOsUri')]",
		"nodeDataUri": "[concat(variables('storageKind'), 'NodeDataUri')]",
		"addressPrefix": "10.0.0.0/8",
		"masterSubnetPrefix": "10.1.0.0/16",
		"nodeSubnetPrefix": "10.2.0.0/16",
		"virtualNetworkName": "openshiftvnet",
		"masterSubnetName": "mastersubnet",
		"nodeSubnetName": "nodesubnet",
		"infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(concat(resourceGroup().id, 'infra')))]",
		"openshiftMasterPublicIpDnsLabel": "[concat('masterdns', uniqueString(concat(resourceGroup().id, 'master')))]",
		"imageReference": {
			"publisher": "Openlogic",
			"offer": "CentOS",
			"sku": "7.5",
			"version": "latest"
		},
		"redHatTags": {
			"app": "OpenShiftOrigin",
			"version": "3.9",
			"platform": "AzurePublic",
			"provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
		},
		"singlequote": "'",
		"sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
		"nodePrepScriptUrl": "[concat(variables('_artifactsLocation'), '/scripts/nodePrep.sh')]",
		"masterPrepScriptUrl": "[concat(variables('_artifactsLocation'), '/scripts/masterPrep.sh')]",
		"openshiftDeploymentScriptUrl": "[concat(variables('_artifactsLocation'), '/scripts/deployOpenShift.sh')]",
		"nodePrepScriptFileName": "nodePrep.sh",
		"masterPrepScriptFileName": "masterPrep.sh",
		"openshiftDeploymentScriptFileName": "deployOpenShift.sh",
		"clusterNodeDeploymentTemplateUrl": "[concat(variables('_artifactsLocation'), '/nested/clusternode.json')]",
		"openshiftDeploymentTemplateUrl": "[concat(variables('_artifactsLocation'), '/nested/openshiftdeploy.json')]",
		"vmSizesMap": {
			"Standard_B1ms": {
				"storageAccountType": "Standard_LRS",
				"storageAccountTier": "Standard"
			}
		}
	},
	"resources": [
		{
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftMasterHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "MasterNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"

			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}]
			}
		}, {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "InfraNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPSIn_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}]
			}
		}, {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(variables('openshiftNodeHostname'), '-nsg')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "NodeNSG",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPIn_all",
					"properties": {
						"description": "Allow HTTP connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "80",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[variables('location')]",
			"tags": {
				"displayName": "VirtualNetwork",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"apiVersion": "[variables('apiVersionNetwork')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
					"name": "[variables('masterSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('masterSubnetPrefix')]"
					}
				}, {
					"name": "[variables('nodeSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('nodeSubnetPrefix')]"
					}
				}]
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountArray')[copyIndex()].name]",
			"location": "[variables('location')]",
			"kind": "Storage",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "[variables('newStorageAccountArray')[copyIndex()].tagName]",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"copy": {
				"name": "storageLoop",
				"count": "[variables(variables('storageLoopCount'))]"
			},
			"sku": {
				"name": "[variables('newStorageAccountArray')[copyIndex()].skuName]",
				"tier": "[variables('newStorageAccountArray')[copyIndex()].skuTier]"
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('infraLbPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraLBPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('infraLbPublicIpDnsLabel')]"
				}
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('openshiftMasterPublicIpDnsLabel')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterPublicIP",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[variables('openshiftMasterPublicIpDnsLabel')]"
				}
			}
		}, 
		{
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterNetworkInterface",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftMasterHostname'), '-nsg')]"
			],
			"copy": {
				"name": "masterNicLoop",
				"count": "[variables('masterInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftMasterHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftInfraNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]"
			],
			"copy": {
				"name": "infraNicLoop",
				"count": "[variables('infraInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftInfraHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '-nic')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftNodeNetworkInterfaces",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftNodeHostname'), '-nsg')]"
			],
			"copy": {
				"name": "nodeNicLoop",
				"count": "[variables('nodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('openshiftNodeHostname'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('nodeSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
				}
			}
		}, {
			"name": "[concat('masterVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"masterNicLoop"
			],
			"copy": {
				"name": "masterVmLoop",
				"count": "[variables('masterInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[variables('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[variables('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[variables('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('masterVmSize')]"
					},
					"hostname": {
						"value": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "masternode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[variables('masterVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[variables('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountMaster')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountMaster')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					}
				}
			}
		}, {
			"name": "[concat('infraVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"infraNicLoop"
			],
			"copy": {
				"name": "infraVmLoop",
				"count": "[variables('infraInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[variables('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[variables('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[variables('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('infraVmSize')]"
					},
					"hostname": {
						"value": "[concat(variables('openshiftInfraHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "infranode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[variables('infraVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[variables('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountInfra')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountInfra')]"
					},
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					}
				}
			}
		}, {
			"name": "[concat('nodeVmDeployment', copyindex())]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"nodeNicLoop"
			],
			"copy": {
				"name": "nodeVmLoop",
				"count": "[variables('nodeInstanceCount')]"
			},
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('clusterNodeDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"location": {
						"value": "[variables('location')]"
					},
					"sshKeyPath": {
						"value": "[variables('sshKeyPath')]"
					},
					"sshPublicKey": {
						"value": "[variables('sshPublicKey')]"
					},
					"dataDiskSize": {
						"value": "[variables('dataDiskSize')]"
					},
					"adminUsername": {
						"value": "[variables('adminUsername')]"
					},
					"vmSize": {
						"value": "[variables('nodeVmSize')]"
					},
					"hostname": {
						"value": "[concat(variables('openshiftNodeHostname'), '-', copyIndex())]"
					},
					"role": {
						"value": "appnode"
					},
					"vmStorageType": {
						"value": "[variables('vmSizesMap')[variables('nodeVmSize')].storageAccountType]"
					},
					"storageKind": {
						"value": "[variables('storageKind')]"
					},
					"newStorageAccountOs": {
						"value": "[variables('newStorageAccountNodeOs')]"
					},
					"newStorageAccountData": {
						"value": "[variables('newStorageAccountNodeData')]"
					},				
					"apiVersionStorage": {
						"value": "[variables('apiVersionStorage')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"imageReference": {
						"value": "[variables('imageReference')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					}
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '/deployOpenShift')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepMaster",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('masterVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "masterPrepLoop",
				"count": "[variables('masterInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('masterPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('masterPrepScriptFileName'), ' ', variables('newStorageAccountPersistentVolume1'), ' ', variables('adminUsername'), ' ', variables('location'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepInfra",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('infraVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "infraPrepLoop",
				"count": "[variables('infraInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '/prepNodes')]",
			"location": "[variables('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepNodes",
				"provider": "[variables('redHatTags').provider]",
				"app": "[variables('redHatTags').app]",
				"version": "[variables('redHatTags').version]",
				"platform": "[variables('redHatTags').platform]"
			},
			"dependsOn": [
				"[concat('nodeVmDeployment', copyindex())]"
			],
			"copy": {
				"name": "nodePrepLoop",
				"count": "[variables('nodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "CustomScript",
				"typeHandlerVersion": "2.0",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
				}
			}
		}, {
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
				"masterPrepLoop",
				"infraPrepLoop",
				"nodePrepLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[variables('_artifactsLocation')]"
					},
					"apiVersionCompute": {
						"value": "[variables('apiVersionCompute')]"
					},
					"openshiftDeploymentScriptUrl": {
						"value": "[variables('openshiftDeploymentScriptUrl')]"
					},
					"openshiftDeploymentScriptFileName": {
						"value": "[variables('openshiftDeploymentScriptFileName')]"
					},
					"newStorageAccountRegistry": {
						"value": "[variables('newStorageAccountRegistry')]"
					},
					"newStorageAccountKey": {
						"value": "[listKeys(variables('newStorageAccountRegistry'), variables('apiVersionStorage')).keys[0].value]"
					},
					"openshiftMasterHostname": {
						"value": "[variables('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).ipAddress]"
					},
					"openshiftInfraHostname": {
						"value": "[variables('openshiftInfraHostname')]"
					},
					"openshiftNodeHostname": {
						"value": "[variables('openshiftNodeHostname')]"
					},
					"masterInstanceCount": {
						"value": "[variables('masterInstanceCount')]"
					},
					"infraInstanceCount": {
						"value": "[variables('infraInstanceCount')]"
					},
					"nodeInstanceCount": {
						"value": "[variables('nodeInstanceCount')]"
					},
					"storageKind": {
						"value": "[variables('storageKind')]"
					},
					"adminUsername": {
						"value": "[variables('adminUsername')]"
					},
					"openshiftPassword": {
						"value": "[variables('openshiftPassword')]"
					},
					"enableMetrics": {
						"value": "[variables('enableMetrics')]"
					},
					"enableLogging": {
						"value": "[variables('enableLogging')]"
					},
					"enableAzure": {
						"value": "[variables('enableAzure')]"
					},
					"aadClientId": {
						"value": "[variables('aadClientId')]"
					},
					"aadClientSecret": {
						"value": "[variables('aadClientSecret')]"
					},
					"nipioDomain": {
						"value": "[concat(reference(variables('infraLbPublicIpDnsLabel')).ipAddress, '.nip.io')]"
					},
					"customDomain": {
						"value": "[variables('defaultSubDomain')]"
					},
					"subDomainChosen": {
						"value": "[concat(variables('defaultSubDomainType'), 'Domain')]"
					},
					"redHatTags": {
						"value": "[variables('redHatTags')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
							},
							"secretName": "[variables('keyVaultSecret')]"
						}
					}
				}
			}
		}
	],
	"outputs": {
		"OpenShift Console Url": {
			"type": "string",
			"value": "[concat('https://', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn, '/console')]"
		},
		"OpenShift Master SSH": {
			"type": "string",
			"value": "[concat('ssh -p 2200 ', variables('adminUsername'), '@', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn)]"
		}
	}
}
